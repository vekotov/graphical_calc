#ifndef SRC_CALC_H_
#define SRC_CALC_H_

#include "structs.h"
/**************************************************************************************************
 *  Функция подсчета функции в точке x
 *
 *          Аргументы:
 *  double x - координата точки X, подставляется вместо x токенов в выражении
 *  Queue *rpn - очередь выражений записанных в польской нотации
 *
 *          Возвращает:
 *  double result - координата точки Y, является результатом вычисления выражения
***************************************************************************************************/
double calculate(double x, Queue *expression);

/**************************************************************************************************
 *  Функция получения указателя на функцию обрабатывающую унарный оператор
 *
 *          Аргументы:
 *  int op - ID оператора (см. defines.h)
 *
 *          Возвращает:
 *  double (*ret_v)(double n) - функция которая обрабатывает этот унарный оператор или
 *      NULL если унарная функция для этого оператора не найдена
***************************************************************************************************/
double(*get_unary_op(int op))(double);

/**************************************************************************************************
 *  Функция получения указателя на функцию обрабатывающую бинарный оператор
 *
 *          Аргументы:
 *  int op - ID оператора (см. defines.h)
 *
 *          Возвращает:
 *  double (*ret_v)(double a, double b) - функция которая обрабатывает этот бинарный оператор или
 *      NULL если бинарная функция для этого оператора не найдена
***************************************************************************************************/
double(*get_binary_op(int op))(double, double);

/**************************************************************************************************
 *  Функция унарного минуса (получения противоположного числа)
 *
 *          Аргументы:
 *  double num - число для которого нужно найти противоположное
 *
 *          Возвращает:
 *  double result - число, противополжное num
***************************************************************************************************/
double minus(double num);

/**************************************************************************************************
 *  Функция сложения
 *
 *          Аргументы:
 *  double a - первое слагаемое
 *  double b - второе слагаемое
 *
 *          Возвращает:
 *  double result - сумма двух слагаемых (a и b)
***************************************************************************************************/
double sum(double a, double b);

/**************************************************************************************************
 *  Функция вычитания
 *
 *          Аргументы:
 *  double a - уменьшаемое
 *  double b - вычитаемое
 *
 *          Возвращает:
 *  double result - разность уменьшаемого и вычитаемого (a и b)
***************************************************************************************************/
double substaction(double a, double b);

/**************************************************************************************************
 *  Функция умножения
 *
 *          Аргументы:
 *  double a - множимое
 *  double b - множитель
 *
 *          Возвращает:
 *  double result - произведение множимого и множителя (a и b)
***************************************************************************************************/
double multiply(double a, double b);

/**************************************************************************************************
 *  Функция умножения
 *
 *          Аргументы:
 *  double a - множимое
 *  double b - множитель
 *
 *          Возвращает:
 *  double result - произведение множимого и множителя (a и b)
***************************************************************************************************/
double division(double a, double b);

/**************************************************************************************************
 *  Функция нахождения котангенса (через тангенс)
 *
 *          Аргументы:
 *  double num - число для которого необходимо найти котангенс
 *
 *          Возвращает:
 *  double result - контангенс числа num (nan если котангенса не существует)
***************************************************************************************************/
double ctg(double num);

/**************************************************************************************************
 *  Функция потребления калькулятором одной лексемы из выражения, записанного в польской
 *      нотации. Результат вычисления будет помещен в аккумулятор.
 *
 *          Аргументы:
 *  Stack *stack - аккумулятор калькулятора для подсчета результата
 *  int op - ID операции (см. defines.h)
 *  double value - значение числа (если int op равен NUM)
 *  int i - номер шага (количество уже потребленных лексем)
 *  double x - то, на что заменять переменную 'x'
***************************************************************************************************/
void consume_calc(Stack *stack, int op, double value, int i, double x);

#endif  // SRC_CALC_H_
